#!/bin/bash

set -e

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
INSTALL_DIR=~/cysic-verifier-docker
PROXY_FILE="proxy.txt"
PROXY_MAP_DIR="proxy_map"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker ---
function install_docker() {
  if ! command -v docker &>/dev/null; then
    echo "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
    sudo apt-get update
    sudo apt-get install -y ca-certificates curl gnupg lsb-release

    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    echo "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  else
    echo "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  fi

  if ! command -v docker-compose &>/dev/null && ! docker compose version &>/dev/null; then
    echo "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    # –î–æ–±–∞–≤—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É docker-compose, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  else
    echo "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  fi
}

install_docker

# --- –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
read -p "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ verifier –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5): " NUM_CONTAINERS
if ! [[ "$NUM_CONTAINERS" =~ ^[1-9][0-9]*$ ]]; then
  echo "–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
  exit 1
fi

read -p "–í–≤–µ–¥–∏—Ç–µ claim_reward_address (Ethereum –∞–¥—Ä–µ—Å): " CLAIM_REWARD_ADDRESS
if ! [[ "$CLAIM_REWARD_ADDRESS" =~ ^0x[a-fA-F0-9]{40}$ ]]; then
  echo "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Ethereum –∞–¥—Ä–µ—Å–∞."
  exit 1
fi

read -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5): " PAUSE_SEC
if ! [[ "$PAUSE_SEC" =~ ^[0-9]+$ ]]; then
  echo "–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
  exit 1
fi

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
mapfile -t ALL_PROXIES < "$PROXY_FILE"
mkdir -p "$PROXY_MAP_DIR"
USED_PROXIES=()

if [ "${#ALL_PROXIES[@]}" -lt "$NUM_CONTAINERS" ]; then
  echo "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–∫—Å–∏: –Ω—É–∂–Ω–æ $NUM_CONTAINERS, –Ω–∞–π–¥–µ–Ω–æ ${#ALL_PROXIES[@]}"
  exit 1
fi

assign_proxy() {
  local cname=$1

  if [ -f "$PROXY_MAP_DIR/$cname" ]; then
    cat "$PROXY_MAP_DIR/$cname"
    return
  fi

  for proxy in "${ALL_PROXIES[@]}"; do
    if ! printf '%s\n' "${USED_PROXIES[@]}" | grep -q "^$proxy$"; then
      echo "$proxy" > "$PROXY_MAP_DIR/$cname"
      USED_PROXIES+=("$proxy")
      echo "$proxy"
      return
    fi
  done

  echo "‚ùå –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏" >&2
  exit 1
}

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ---
echo "üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
for i in $(seq 1 $NUM_CONTAINERS); do
  docker rm -f verifier$i 2>/dev/null || true
  rm -rf "$INSTALL_DIR/config/verifier$i"
  rm -f "$PROXY_MAP_DIR/verifier$i"
done

rm -rf "$INSTALL_DIR"
mkdir -p "$INSTALL_DIR"
cd "$INSTALL_DIR"

# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤ ---
echo "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏..."
curl -L -o verifier https://github.com/cysic-labs/cysic-phase3/releases/download/v1.0.0/verifier_linux
curl -L -o libdarwin_verifier.so https://github.com/cysic-labs/cysic-phase3/releases/download/v1.0.0/libdarwin_verifier.so
curl -L -o librsp.so https://github.com/cysic-labs/cysic-phase3/releases/download/v1.0.0/librsp.so
chmod +x verifier

# --- start.sh ---
echo "‚úçÔ∏è –°–æ–∑–¥–∞—ë–º start.sh..."
cat > start.sh <<EOF
#!/bin/bash
cp /root/.cysic/config.yaml ./config.yaml
export CHAIN_ID=534352
LD_LIBRARY_PATH=. ./verifier
EOF
chmod +x start.sh

# --- Dockerfile ---
echo "üì¶ –°–æ–∑–¥–∞—ë–º Dockerfile..."
cat > Dockerfile <<EOF
FROM ubuntu:22.04

WORKDIR /app

RUN apt-get update && apt-get install -y libstdc++6 libgcc-s1 bash ca-certificates && update-ca-certificates

COPY verifier .
COPY libdarwin_verifier.so .
COPY librsp.so .
COPY start.sh .

RUN chmod +x verifier start.sh

CMD ["./start.sh"]
EOF

# --- docker-compose.yml ---
echo "üìù –°–æ–∑–¥–∞—ë–º docker-compose.yml –∏ –∫–æ–Ω—Ñ–∏–≥–∏..."
echo "version: '3.8'" > docker-compose.yml
echo "services:" >> docker-compose.yml

for i in $(seq 1 $NUM_CONTAINERS); do
  CNAME="verifier$i"
  mkdir -p config/$CNAME/keys
  cat > config/$CNAME/config.yaml <<YAML
chain:
  endpoint: "grpc-testnet.prover.xyz:80"
  chain_id: "cysicmint_9001-1"
  gas_coin: "CYS"
  gas_price: 10

claim_reward_address: "$CLAIM_REWARD_ADDRESS"

server:
  cysic_endpoint: "https://ws-pre.prover.xyz"
YAML

  PROXY=$(assign_proxy "$CNAME")
  IP=$(echo "$PROXY" | cut -d: -f1)
  PORT=$(echo "$PROXY" | cut -d: -f2)
  USER=$(echo "$PROXY" | cut -d: -f3)
  PASS=$(echo "$PROXY" | cut -d: -f4)
  PROXY_URL="http://$USER:$PASS@$IP:$PORT"

  cat >> docker-compose.yml <<SERVICE
  $CNAME:
    build: .
    container_name: $CNAME
    environment:
      - CHAIN_ID=534352
      - http_proxy=$PROXY_URL
      - https_proxy=$PROXY_URL
    volumes:
      - ./config/$CNAME:/root/.cysic
    restart: always
SERVICE

done

# --- –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ---
echo "üöß –°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫–µ—Ä-–æ–±—Ä–∞–∑—ã..."
docker compose build

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø–∞—É–∑–æ–π $PAUSE_SEC —Å–µ–∫—É–Ω–¥..."
for i in $(seq 1 $NUM_CONTAINERS); do
  docker compose up -d verifier$i
  echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä verifier$i –∑–∞–ø—É—â–µ–Ω."
  if [ "$i" -lt "$NUM_CONTAINERS" ]; then
    sleep "$PAUSE_SEC"
  fi
done

echo "üéâ –ì–æ—Ç–æ–≤–æ! $NUM_CONTAINERS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ verifier –∑–∞–ø—É—â–µ–Ω—ã."
